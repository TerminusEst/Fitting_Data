"""
Testing Ordinary Least Squares method and Maximum Likelihood Estimate 
"""
import numpy as np
from scipy.optimize import minimize
import math
import matplotlib.pyplot as plt
import scipy

################################################################################

# the data I am trying to fit
dataX = array([21.12448301, 22.34338095, 22.776001  , 25.92306699, 26.69022778,
       27.89035694, 30.23633787, 31.13124589, 31.83742358, 32.10870861,
       34.10342138, 35.61661114, 35.69150192, 35.71896748, 37.43673898,
       37.86726031, 39.99993312, 40.05980542, 40.36663343, 40.84765977,
       42.0820755 , 42.17330843, 42.9817036 , 43.20332812, 43.28187468,
       43.30285741, 43.31569446, 43.4744868 , 43.63787588, 44.60589417,
       45.7895292 , 45.79311614, 46.01842337, 46.85360101, 47.14089921,
       47.21449605, 47.82958414, 47.87476692, 48.06879532, 48.27419191,
       48.75342791, 48.75384573, 49.96531321, 50.0233614 , 50.93636492,
       51.48752411, 51.92955251, 52.34942357, 53.41061966, 53.70017166,
       54.49753613, 54.57927162, 54.68279957, 54.69650105, 56.11931994,
       56.73978272, 57.11343081, 57.25182973, 57.25646949, 57.74422875,
       58.87165344, 59.74573973, 61.56740043, 61.70684391, 64.91128928,
       65.2877738 , 65.66213383, 67.74951205, 68.93894539, 70.55227651,
       70.71165436, 70.71257795, 71.25975664, 72.79984894, 74.41572408,
       74.50154077, 76.39766564, 82.20336138, 83.92421858])

dataY = array([1.8812385 , 1.78595415, 1.83761348, 1.83654201, 1.76043658,
       2.11181669, 1.84943479, 1.84684218, 1.81411566, 2.08642495,
       2.00416504, 2.18961412, 2.0792077 , 1.87808031, 2.09844292,
       2.14220965, 2.06046297, 2.21883197, 2.10453769, 2.07009143,
       2.08794592, 2.18655783, 2.12624198, 2.08057779, 2.07471622,
       2.09023308, 2.10543724, 2.08791675, 2.07635204, 2.02306979,
       2.05730937, 2.1227608 , 2.12567192, 2.04037933, 2.2604846 ,
       2.14246669, 2.14431906, 2.15770073, 2.14421006, 2.08165303,
       2.19502825, 2.13536064, 2.21770398, 2.41978256, 2.42207195,
       2.33872016, 2.0351506 , 2.56119825, 2.45867108, 2.65243506,
       2.50913631, 2.46852312, 2.67317037, 2.81318186, 2.32536506,
       2.91918374, 2.72632291, 2.99129539, 2.94152843, 3.24311429,
       2.92745529, 3.26939229, 3.24270167, 3.51365046, 3.03269535,
       3.34156773, 3.44899769, 3.25877132, 3.436551  , 3.19761608,
       3.12121902, 3.12364009, 3.1088733 , 3.18738546, 2.79199296,
       2.83273251, 3.17341213, 2.60134062, 2.59066535])

################################################################################

def gaussian(x, a, r, mu, sig):    #no intercept
    return  a + (r/(math.sqrt(2.*math.pi)*sig)*np.exp(-np.power((x - mu)/sig, 2.)/2))

def negloglike(params): 
    a, r, mu, sig = params  
    N = len(dataX) 
    return -N/ 2 * np.log(2*np.pi) + np.sum((dataY - gaussian(dataX, a, r, mu, sig))**2) 
      
################################################################################
      
# initial guesses for values
r1 = 55.
a1 = min(dataY)
mu1 = dataX[dataY.argmax()]+ 5
sig1 = 12.0  
      
# first fit the ordinary least squares
p01 = [a1, r1, mu1, sig1]
params1 = scipy.optimize.curve_fit(gaussian, dataX, dataY, p01, maxfev = 100000)
a2, r2, mu2, sig2 = params1[0]

# now fit the maximum least squares method
results = minimize(negloglike, p01, method = "Nelder-Mead")   
a3, r3, mu3, sig3 = results.x

# calculate the data
newX = np.linspace(dataX[0], dataX[-1], 1000)

OLS_calc = gaussian(newX, a2, r2, mu2, sig2)
MLE_calc = gaussian(newX, a3, r3, mu3, sig3)

# find the point the
maxgradOLS = newX[np.gradient(OLS_calc).argmax()]

clf()

ax1 = subplot(211)
plot(dataX, dataY, 'ob', label = "Data")
plot(newX, OLS_calc, 'g', label = "OLS fit", lw = 4)
plot(newX, MLE_calc, 'r', label = "MLE fit")

axvline(maxgradOLS, linestyle = "dashed", color = "blue")

legend()

ax2 = subplot(212)
plot(newX, np.gradient(OLS_calc))
plot(newX, np.gradient(MLE_calc))

axvline(maxgradOLS, linestyle = "dashed", color = "blue")
show()





















